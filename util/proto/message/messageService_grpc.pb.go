// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: message/messageService.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	GetAllNotifications(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	CreateNotification(ctx context.Context, in *NewNotificationRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAllChatsForUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*GetAllChatsResponse, error)
	CreateChat(ctx context.Context, in *NewChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error)
	GetAllMessagesForUser(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*GetAllMessagesResponse, error)
	CreateMessage(ctx context.Context, in *NewMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetAllNotifications(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetAllNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateNotification(ctx context.Context, in *NewNotificationRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAllChatsForUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*GetAllChatsResponse, error) {
	out := new(GetAllChatsResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetAllChatsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateChat(ctx context.Context, in *NewChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error) {
	out := new(GetChatResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAllMessagesForUser(ctx context.Context, in *ChatIdRequest, opts ...grpc.CallOption) (*GetAllMessagesResponse, error) {
	out := new(GetAllMessagesResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/GetAllMessagesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateMessage(ctx context.Context, in *NewMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	GetAllNotifications(context.Context, *UserIdRequest) (*GetAllResponse, error)
	CreateNotification(context.Context, *NewNotificationRequest) (*GetResponse, error)
	GetAllChatsForUser(context.Context, *UserIdRequest) (*GetAllChatsResponse, error)
	CreateChat(context.Context, *NewChatRequest) (*GetChatResponse, error)
	GetAllMessagesForUser(context.Context, *ChatIdRequest) (*GetAllMessagesResponse, error)
	CreateMessage(context.Context, *NewMessageRequest) (*GetMessageResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetAllNotifications(context.Context, *UserIdRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotifications not implemented")
}
func (UnimplementedMessageServiceServer) CreateNotification(context.Context, *NewNotificationRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedMessageServiceServer) GetAllChatsForUser(context.Context, *UserIdRequest) (*GetAllChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChatsForUser not implemented")
}
func (UnimplementedMessageServiceServer) CreateChat(context.Context, *NewChatRequest) (*GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedMessageServiceServer) GetAllMessagesForUser(context.Context, *ChatIdRequest) (*GetAllMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMessagesForUser not implemented")
}
func (UnimplementedMessageServiceServer) CreateMessage(context.Context, *NewMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetAllNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAllNotifications(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateNotification(ctx, req.(*NewNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAllChatsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAllChatsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetAllChatsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAllChatsForUser(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateChat(ctx, req.(*NewChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAllMessagesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAllMessagesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/GetAllMessagesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAllMessagesForUser(ctx, req.(*ChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateMessage(ctx, req.(*NewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNotifications",
			Handler:    _MessageService_GetAllNotifications_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _MessageService_CreateNotification_Handler,
		},
		{
			MethodName: "GetAllChatsForUser",
			Handler:    _MessageService_GetAllChatsForUser_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _MessageService_CreateChat_Handler,
		},
		{
			MethodName: "GetAllMessagesForUser",
			Handler:    _MessageService_GetAllMessagesForUser_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _MessageService_CreateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/messageService.proto",
}
