syntax = "proto3";

option go_package = "github.com/XWS-BSEP-TIM1-2022/dislinkt/util/proto/connection";

package connection;

import "google/api/annotations.proto";

service ConnectionService {
  rpc NewUserConnection(UserConnectionRequest) returns (UserConnectionResponse){
    option(google.api.http) = {
      post: "/connections",
      body: "connection"
    };
  }

  rpc ApproveConnection(UserConnectionRequest) returns (UserConnectionResponse){
    option(google.api.http) = {
      put: "/connections/approve",
      body: "connection"
    };
  }

  rpc GetConnection(Connection) returns (Connection){
    option(google.api.http) = {
      get: "/connections/{userId}/{connectedUserId}",
    };
  }

  rpc ApproveAllConnection(UserIdRequest) returns (EmptyRequest){
    option(google.api.http) = {
      put: "/connections/approve/all/{userId}",
    };
  }

  rpc RejectConnection(UserConnectionRequest) returns (UserConnectionResponse){
    option(google.api.http) = {
      put: "/connections/reject",
      body: "connection"
    };
  }

  rpc DeleteConnection(Connection) returns (UserConnectionResponse){
    option(google.api.http) = {
      delete: "/connections",
    };
  }

  rpc GetAllConnections(UserIdRequest) returns (AllConnectionResponse){
    option(google.api.http) = {
      get: "/connections/all/{userId}"
    };
  }

  rpc GetFollowings(UserIdRequest) returns (AllConnectionResponse){
    option(google.api.http) = {
      get: "/connections/followings/{userId}"
    };
  }

  rpc GetFollowers(UserIdRequest) returns (AllConnectionResponse){
    option(google.api.http) = {
      get: "/connections/followers/{userId}"
    };
  }

  rpc GetAllRequestConnectionsByUserId(UserIdRequest) returns (AllConnectionResponse){
    option(google.api.http) = {
      get: "/connections/requests/{userId}"
    };
  }

  rpc GetAllPendingConnectionsByUserId(UserIdRequest) returns (AllConnectionResponse){
    option(google.api.http) = {
      get: "/connections/pending/{userId}"
    };
  }

  rpc BlockUser(BlockUserRequest) returns (EmptyRequest){
    option(google.api.http) = {
      post: "/block",
      body: "block"
    };
  }

  rpc UnblockUser(BlockUserRequest) returns (EmptyRequest){
    option(google.api.http) = {
      put: "/block",
      body: "block"
    };
  }

  rpc IsBlocked(Block) returns (IsBlockedResponse){
    option(google.api.http) = {
      get: "/block/{userId}/{blockUserId}"
    };
  }

  rpc IsBlockedAny(Block) returns (IsBlockedResponse){
    option(google.api.http) = {
      get: "/block/any/{userId}/{blockUserId}"
    };
  }

  rpc Blocked(UserIdRequest) returns (BlockedResponse){
    option(google.api.http) = {
      get: "/block/{userId}"
    };
  }

  rpc BlockedBy(UserIdRequest) returns (BlockedResponse){
    option(google.api.http) = {
      get: "/block/by/{userId}"
    };
  }

  // Blocked + BlockedBy
  rpc BlockedAny(UserIdRequest) returns (BlockedResponse){
    option(google.api.http) = {
      get: "/block/any/{userId}"
    };
  }

  rpc ChangeMessageNotification(UserConnectionRequest) returns (UserConnectionResponse){
    option(google.api.http) = {
      put: "/connections/notification/message",
      body: "connection"
    };
  }

  rpc ChangePostNotification(UserConnectionRequest) returns (UserConnectionResponse){
    option(google.api.http) = {
      put: "/connections/notification/post",
      body: "connection"
    };
  }

  rpc ChangeCommentNotification(UserConnectionRequest) returns (UserConnectionResponse){
    option(google.api.http) = {
      put: "/connections/notification/comment",
      body: "connection"
    };
  }


}

message Connection{
  string userId = 1;
  string connectedUserId = 2;
  bool isConnected = 3;
  bool pendingConnection = 4;
  bool isMessageNotificationEnabled = 5;
  bool isPostNotificationEnabled = 6;
  bool isCommentNotificationEnabled = 7;
}

message UserConnectionRequest{
  Connection connection = 1;
}

message UserConnectionResponse{
  Connection connection = 1;
}

message UserIdRequest{
  string userId = 1;
}

message EmptyRequest{
}

message AllConnectionResponse{
  repeated Connection connections = 1;
}

message BlockUserRequest{
  Block block = 1;
}

message Block{
  string userId = 1;
  string blockUserId = 2;
}

message IsBlockedResponse{
  bool blocked = 1;
}

message BlockedResponse{
  repeated string usersId = 1;
}