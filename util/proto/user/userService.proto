syntax = "proto3";

option go_package = "github.com/XWS-BSEP-TIM1-2022/dislinkt/util/proto/user";

package user;

import "google/api/annotations.proto";

service UserService {
  rpc GetRequest (UserIdRequest) returns (GetResponse){
    option(google.api.http) = {
      get: "/users/{userId}"
    };
  };

  rpc GetAllRequest (EmptyRequest) returns (UsersResponse){
    option(google.api.http) = {
      get: "/users"
    };
  };

  rpc PostRequest (UserRequest) returns (GetResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "user"
    };
  }

  rpc PostAdminRequest (UserRequest) returns (GetResponse) {
    option (google.api.http) = {
      post: "/users/admin"
      body: "user"
    };
  }

  rpc UpdateRequest (UserRequest) returns (GetResponse) {
    option (google.api.http) = {
      put: "/users/{userId}"
      body: "user"
    };
  }

  rpc DeleteRequest (UserIdRequest) returns (EmptyRequest){
    option(google.api.http) = {
      delete: "/users/{userId}"
    };
  };

  rpc SearchUsersRequest (SearchRequest) returns (UsersResponse){
    option(google.api.http) = {
      get: "/users/search"
    };
  };

  rpc LoginRequest (CredentialsRequest) returns (LoginResponse){
    option (google.api.http) = {
      post: "/auth/login"
      body: "credentials"
    };
  }

  rpc ConfirmRegistration (ConfirmationRequest) returns (ConfirmationResponse){
    option (google.api.http) = {
      get: "/auth/verify/{confirmationId}"
    };
  }

  rpc IsUserAuthenticated (AuthRequest) returns (AuthResponse){
    option (google.api.http) = {
      get: "/auth"
    };
  }

  rpc IsApiTokenValid (AuthRequest) returns (UserIdRequest){
    option (google.api.http) = {
      get: "/auth/api-token"
    };
  }

  rpc GetQR2FA (UserIdRequest) returns (TFAResponse){
    option (google.api.http) = {
      put: "/auth/getQR2fa/{userId}"
    };
  }

  rpc Enable2FA (TFARequest) returns (EmptyRequest){
    option (google.api.http) = {
      put: "/auth/enable2fa"
      body: "tfa"
    };
  }

  rpc Verify2FA (TFARequest) returns (LoginResponse){
    option (google.api.http) = {
      post: "/auth/verify2fa"
      body: "tfa"
    };
  }

  rpc Disable2FA (UserIdRequest) returns (EmptyRequest){
    option (google.api.http) = {
      put: "/auth/disable2fa/{userId}"
    };
  }

  rpc UpdatePasswordRequest (NewPasswordRequest) returns (GetResponse){
    option (google.api.http) = {
      put: "/users"
      body: "newPassword"
    };
  }

  rpc GetAllUsersExperienceRequest (ExperienceRequest) returns (ExperienceResponse){
    option(google.api.http) = {
      get: "/users/experience/{userId}"
    };
  }

  rpc PostExperienceRequest (NewExperienceRequest) returns (NewExperienceResponse){
    option (google.api.http) = {
      post: "/users/experience"
      body: "experience"
    };
  }

  rpc DeleteExperienceRequest (DeleteUsersExperienceRequest) returns (EmptyRequest){
    option(google.api.http) = {
      delete: "/users/experience/{experienceId}"
    };
  };

  rpc IsUserPrivateRequest (UserIdRequest) returns (PrivateResponse){
    option(google.api.http) = {
      get: "/users/is-private/{userId}"
    };
  };

  rpc AddUserSkill (NewSkillRequest) returns (EmptyRequest){
    option(google.api.http) = {
      put: "/users/newSkill"
      body: "newSkill"
    };
  };

  rpc AddUserInterest (NewInterestRequest) returns (EmptyRequest){
    option(google.api.http) = {
      put: "/users/newInterest"
      body: "newInterest"
    };
  }

  rpc RemoveSkill (RemoveSkillRequest) returns (EmptyRequest){
    option(google.api.http) = {
      delete: "/users/removeSkill/{userId}/{skill}"
    };
  }

  rpc RemoveInterest (RemoveInterestRequest) returns (EmptyRequest){
    option(google.api.http) = {
      delete: "/users/removeInterest/{userId}/{interest}"
    };
  }

  rpc ApiTokenRequest (UserIdRequest) returns (ApiTokenResponse){
    option(google.api.http) = {
      get: "/users/api-token/{userId}"
    };
  };

  rpc ApiTokenCreateRequest (UserIdRequest) returns (ApiTokenResponse){
    option(google.api.http) = {
      get: "/users/api-token/new/{userId}"
    };
  };

  rpc ApiTokenRemoveRequest (UserIdRequest) returns (EmptyRequest){
    option(google.api.http) = {
      delete: "/users/api-token/{userId}"
    };
  };
}


message User {
  string id = 1;
  string name = 2;
  string surname = 3;
  string email = 4;
  string phoneNumber = 5;
  int64 gender = 6;
  string birthDate = 7;
  string username = 8;
  string password = 9;
  string confirmPassword = 10;
  string bio = 11;
  repeated string skills = 12;
  repeated string interests = 13;
  bool private = 14;
  string role = 15;
  bool TFAEnabled = 16;
}

message Experience{
  string id = 1;
  string userId = 2;
  string name = 3;
  string title = 4;
  string startDate = 5;
  string endDate = 6;
  bool experienceType = 7;
}

message UserIdRequest{
  string userId = 1;
}

message TFARequest{
  Tfa tfa = 1;
}

message Tfa{
  string userId = 1;
  string code = 2;
}

message GetResponse{
  User user = 1;
}

message EmptyRequest{}

message UsersResponse{
  repeated User users = 1;
}

message UserRequest{
  string userId = 1;
  User user = 2;
}

message Credentials{
  string username = 1;
  string password = 2;
}

message CredentialsRequest{
  Credentials credentials = 1;
}

message LoginResponse{
  string token = 1;
  string role = 2;
  string userId = 3;
  string email = 4;
  bool isPrivate = 5;
}

message SearchRequest{
  string searchParam = 1;
  string userId = 2;
}

message AuthRequest{
  string token = 1;
}

message AuthResponse{
  string userRole = 1;
}

message NewPasswordRequest{
  NewPassword newPassword = 1;
}

message NewPassword{
  string userId = 1;
  string password = 2;
  string confirmNewPassword = 3;
  string oldPassword = 4;
}

message ExperienceRequest{
  string userId = 1;
}

message ExperienceResponse{
  repeated Experience experiences = 1;
}

message NewExperienceRequest{
  Experience experience = 1;
}

message NewExperienceResponse{
  Experience experience = 1;
}

message DeleteUsersExperienceRequest{
  string experienceId = 1;
}

message PrivateResponse{
  bool isPrivate = 1;
}

message NewSkillRequest{
  NewSkill newSkill = 1;
}

message NewSkill{
  string userId = 1;
  string skill = 2;
}

message NewInterestRequest{
  NewInterest newInterest = 1;
}

message NewInterest{
  string userId = 1;
  string interest = 2;
}

message RemoveSkillRequest{
  string userId = 1;
  string skill = 2;
}

message RemoveInterestRequest{
  string userId = 1;
  string interest = 2;
}

message TFAResponse{
  bytes qrCode = 1;
}

message ApiTokenResponse{
string ApiToken = 1;
}

message ConfirmationRequest{
  string confirmationId = 1;
}

message ConfirmationResponse{
  string response_message = 1;
}
