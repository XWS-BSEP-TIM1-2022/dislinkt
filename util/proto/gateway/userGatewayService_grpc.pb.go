// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: gateway/userGatewayService.proto

package gateway

import (
	context "context"
	user "github.com/XWS-BSEP-TIM1-2022/dislinkt/util/proto/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGatewayClient is the client API for UserGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGatewayClient interface {
	GetRequest(ctx context.Context, in *user.UserIdRequest, opts ...grpc.CallOption) (*user.GetResponse, error)
	GetAllRequest(ctx context.Context, in *user.EmptyRequest, opts ...grpc.CallOption) (*user.GetAllUsers, error)
	PostRequest(ctx context.Context, in *user.UserRequest, opts ...grpc.CallOption) (*user.GetResponse, error)
	UpdateRequest(ctx context.Context, in *user.UserRequest, opts ...grpc.CallOption) (*user.GetResponse, error)
	DeleteRequest(ctx context.Context, in *user.UserIdRequest, opts ...grpc.CallOption) (*user.EmptyRequest, error)
}

type userGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGatewayClient(cc grpc.ClientConnInterface) UserGatewayClient {
	return &userGatewayClient{cc}
}

func (c *userGatewayClient) GetRequest(ctx context.Context, in *user.UserIdRequest, opts ...grpc.CallOption) (*user.GetResponse, error) {
	out := new(user.GetResponse)
	err := c.cc.Invoke(ctx, "/gateway.UserGateway/GetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGatewayClient) GetAllRequest(ctx context.Context, in *user.EmptyRequest, opts ...grpc.CallOption) (*user.GetAllUsers, error) {
	out := new(user.GetAllUsers)
	err := c.cc.Invoke(ctx, "/gateway.UserGateway/GetAllRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGatewayClient) PostRequest(ctx context.Context, in *user.UserRequest, opts ...grpc.CallOption) (*user.GetResponse, error) {
	out := new(user.GetResponse)
	err := c.cc.Invoke(ctx, "/gateway.UserGateway/PostRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGatewayClient) UpdateRequest(ctx context.Context, in *user.UserRequest, opts ...grpc.CallOption) (*user.GetResponse, error) {
	out := new(user.GetResponse)
	err := c.cc.Invoke(ctx, "/gateway.UserGateway/UpdateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGatewayClient) DeleteRequest(ctx context.Context, in *user.UserIdRequest, opts ...grpc.CallOption) (*user.EmptyRequest, error) {
	out := new(user.EmptyRequest)
	err := c.cc.Invoke(ctx, "/gateway.UserGateway/DeleteRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGatewayServer is the server API for UserGateway service.
// All implementations must embed UnimplementedUserGatewayServer
// for forward compatibility
type UserGatewayServer interface {
	GetRequest(context.Context, *user.UserIdRequest) (*user.GetResponse, error)
	GetAllRequest(context.Context, *user.EmptyRequest) (*user.GetAllUsers, error)
	PostRequest(context.Context, *user.UserRequest) (*user.GetResponse, error)
	UpdateRequest(context.Context, *user.UserRequest) (*user.GetResponse, error)
	DeleteRequest(context.Context, *user.UserIdRequest) (*user.EmptyRequest, error)
	mustEmbedUnimplementedUserGatewayServer()
}

// UnimplementedUserGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedUserGatewayServer struct {
}

func (UnimplementedUserGatewayServer) GetRequest(context.Context, *user.UserIdRequest) (*user.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedUserGatewayServer) GetAllRequest(context.Context, *user.EmptyRequest) (*user.GetAllUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRequest not implemented")
}
func (UnimplementedUserGatewayServer) PostRequest(context.Context, *user.UserRequest) (*user.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRequest not implemented")
}
func (UnimplementedUserGatewayServer) UpdateRequest(context.Context, *user.UserRequest) (*user.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequest not implemented")
}
func (UnimplementedUserGatewayServer) DeleteRequest(context.Context, *user.UserIdRequest) (*user.EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequest not implemented")
}
func (UnimplementedUserGatewayServer) mustEmbedUnimplementedUserGatewayServer() {}

// UnsafeUserGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGatewayServer will
// result in compilation errors.
type UnsafeUserGatewayServer interface {
	mustEmbedUnimplementedUserGatewayServer()
}

func RegisterUserGatewayServer(s grpc.ServiceRegistrar, srv UserGatewayServer) {
	s.RegisterService(&UserGateway_ServiceDesc, srv)
}

func _UserGateway_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserGateway/GetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServer).GetRequest(ctx, req.(*user.UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGateway_GetAllRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServer).GetAllRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserGateway/GetAllRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServer).GetAllRequest(ctx, req.(*user.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGateway_PostRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServer).PostRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserGateway/PostRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServer).PostRequest(ctx, req.(*user.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGateway_UpdateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServer).UpdateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserGateway/UpdateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServer).UpdateRequest(ctx, req.(*user.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGateway_DeleteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServer).DeleteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserGateway/DeleteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServer).DeleteRequest(ctx, req.(*user.UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGateway_ServiceDesc is the grpc.ServiceDesc for UserGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.UserGateway",
	HandlerType: (*UserGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequest",
			Handler:    _UserGateway_GetRequest_Handler,
		},
		{
			MethodName: "GetAllRequest",
			Handler:    _UserGateway_GetAllRequest_Handler,
		},
		{
			MethodName: "PostRequest",
			Handler:    _UserGateway_PostRequest_Handler,
		},
		{
			MethodName: "UpdateRequest",
			Handler:    _UserGateway_UpdateRequest_Handler,
		},
		{
			MethodName: "DeleteRequest",
			Handler:    _UserGateway_DeleteRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/userGatewayService.proto",
}
