version: "3.8"

services:  
    tracing:
        image: jaegertracing/all-in-one
        container_name: jaeger
        ports:
          - "6831:6831/udp"
          - "6832:6832/udp"
          - "16686:16686"
          - "14268:14268"
          - "14250:14250"
    gateway:
        image: gateway
        container_name: gateway
        build:
          context: .
          dockerfile: ./gateway/Dockerfile
        restart: always
        ports:
          - 8090:8090
        environment:
          - JAEGER_SERVICE_NAME=posts
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - GATEWAY_GRPC_PORT=8080
          - GATEWAY_HTTP_PORT=8090
          - USER_SERVICE_HOST=user_service
          - USER_SERVICE_PORT=8000
          - POST_SERVICE_HOST=post_service
          - POST_SERVICE_PORT=8000
          - CONNECTION_SERVICE_HOST=connection_service
          - CONNECTION_SERVICE_PORT=8000
          - JOB_SERVICE_HOST=job_service
          - JOB_SERVICE_PORT=8000
          - MESSAGE_SERVICE_HOST=message_service
          - MESSAGE_SERVICE_PORT=8000
          - CERTIFICATE_PATH=./certificates/dislinkt.cer
          - CERTIFICATE_KEY_PATH=./certificates/dislinkt_private_key.key
    
    user_service:
        image: user_service
        container_name: user_service
        build:
          context: .
          dockerfile: ./user-microservice/Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=user_service
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - USER_SERVICE_PORT=8000
          - USER_DB_HOST=dislinkt:WiYf6BvFmSpJS2Ob@xws.cjx50.mongodb.net/usersDB
          - USER_SERVICE_NAME=user_service
          - CONNECTION_SERVICE_HOST=connection_service
          - CONNECTION_SERVICE_PORT=8000
    
    post_service:
        image: post_service
        container_name: post_service
        build:
          context: .
          dockerfile: ./post-microservice/Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=post_service
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - POST_SERVICE_PORT=8000
          - POST_DB_HOST=dislinkt:WiYf6BvFmSpJS2Ob@xws.cjx50.mongodb.net/postsDB
          - POST_SERVICE_NAME=post_service
          - MESSAGE_SERVICE_HOST=message_service
          - MESSAGE_SERVICE_PORT=8000
          
    connection_service:
        image: connection_service
        container_name: connection_service
        build:
          context: .
          dockerfile: ./connection-microservice/Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=connection_service
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - CONNECTION_SERVICE_PORT=8000
          - CONNECTION_DB_URI=neo4j+s://ac87e36d.databases.neo4j.io
          - CONNECTION_DB_USERNAME=neo4j
          - CONNECTION_DB_PASSWORD=I7InmmqDyQoT4BhAF5iXOCDB-EQ3wh-hcJn2-8QSobY
          - CONNECTION_SERVICE_NAME=connection_service
          - USER_SERVICE_HOST=user_service
          - USER_SERVICE_PORT=8000
          
    job_service:
        image: job_service
        container_name: job_service
        build:
          context: .
          dockerfile: ./job-microservice/Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=job_service
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - JOB_SERVICE_PORT=8000
          - JOB_DB_HOST=dislinkt:WiYf6BvFmSpJS2Ob@xws.cjx50.mongodb.net/jobsDB
          - JOB_SERVICE_NAME=job_service
          
    message_service:
        image: message_service
        container_name: message_service
        build:
          context: .
          dockerfile: ./message-microservice/Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=message_service
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - MESSAGE_SERVICE_PORT=8000
          - MESSAGE_DB_HOST=dislinkt:WiYf6BvFmSpJS2Ob@xws.cjx50.mongodb.net/jobsDB
          - MESSAGE_SERVICE_NAME=message_service
          - CONNECTION_SERVICE_HOST=connection_service
          - CONNECTION_SERVICE_PORT=8000
        
    agent_app_back:
        image: agent_app_back
        container_name: agent_app_back
        build:
          context: .
          dockerfile: ./agent-app-back/Dockerfile
        ports:
          - 80:80
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=post_service
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
    loki:
        image: grafana/loki:main-5206e3a
        networks:
            - monitoring

    grafana:
        image: grafana/grafana:8.5.3
        ports:
            - "3000:3000"
        environment:
              GF_RENDERING_SERVER_URL: http://renderer:8081/render
              GF_RENDERING_CALLBACK_URL: http://grafana:3000/
              GF_LOG_FILTERS: rendering:debug
        volumes:
              - grafana:/var/lib/grafana
              - ./grafana/dashboards:/var/lib/grafana/dashboards
              - ./grafana/provisioning:/etc/grafana/provisioning
        networks:
              - monitoring

    renderer:
        image: grafana/grafana-image-renderer:3.4.2
        environment:
            ENABLE_METRICS: "true"
        networks:
            - monitoring

    fluent-bit:
        image: grafana/fluent-bit-plugin-loki:main-5206e3a-amd64
        environment:
            - LOKI_URL=http://loki:3100/loki/api/v1/push
        volumes:
            - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
        ports:
            - "24224:24224"
            - "24224:24224/udp"
        networks:
            - monitoring

    prometheus:
        image: prom/prometheus:v2.35.0
        restart: on-failure
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus:/etc/prometheus
            - prometheus:/var/lib/prometheus
        networks:
            - monitoring

    node-exporter:
        image: prom/node-exporter:v1.1.2
        ports:
            - "9100:9100"
        networks:
            - monitoring

    cadvisor:
        image: google/cadvisor:v0.33.0
        ports:
            - "8080:8080"
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        networks:
            - monitoring


volumes:
    grafana:
        name: grafana
    prometheus:
        name: prometheus

networks:
    monitoring:
        name: monitoring

    # dislinkt-frontend:
        # image: dislinkt-frontend
        # container_name: dislinkt-frontend
        # build:
          # context: .
          # dockerfile: ./dislinkt-frontend/Dockerfile
        # restart: always
        # ports:
          # - 4200:80
        